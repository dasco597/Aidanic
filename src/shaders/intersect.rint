#version 460
#extension GL_NV_ray_tracing : require

struct Sphere {
	float aabb_minx;
	float aabb_miny;
	float aabb_minz;
	float aabb_maxx;
	float aabb_maxy;
	float aabb_maxz;
};
layout(set = 0, binding = 3, std430) readonly buffer Spheres { Sphere spheres[]; };

hitAttributeNV vec3 normal;

void main()
{
    Sphere sphere = spheres[gl_PrimitiveID];
    vec3 center = vec3(sphere.aabb_maxx + sphere.aabb_minx,
					   sphere.aabb_maxy + sphere.aabb_miny,
					   sphere.aabb_maxz + sphere.aabb_minz) / 2.0;
    float radius = (sphere.aabb_maxx - sphere.aabb_minx) / 2.0;
	
    vec3 origin = gl_WorldRayOriginNV;
    vec3 dir = normalize(gl_WorldRayDirectionNV);
	
	vec3 co = origin - center;
	float a = 1.0; // dot(dir, dir)
	float b = dot(co, dir);
	float c = dot(co, co) - radius * radius;
	float discr = b*b - a*c;
	if (discr <= 0.0) return;

	float t = (-b - sqrt(discr)) / a;
	if (gl_RayTminNV < t && t < gl_RayTmaxNV) {
		vec3 p = origin + t * dir;
		normal = p - center;
		reportIntersectionNV(t, 0u);
		return;
	}
	t = (-b + sqrt(discr)) / a;
	if (gl_RayTminNV < t && t < gl_RayTmaxNV) {
		vec3 p = origin + t * dir;
		normal = p - center;
		reportIntersectionNV(t, 0u);
		return;
	}
}