#version 460
#extension GL_NV_ray_tracing : require

// also defined in Renderer.h
#define SPHERE_COUNT_PER_TLAS 8

struct Sphere {
	vec4 posRadius;
};
layout(set = 1, binding = 1, std430) readonly buffer Spheres { Sphere spheres[SPHERE_COUNT_PER_TLAS]; };

hitAttributeNV vec3 normal;

void main()
{
	if (SPHERE_COUNT_PER_TLAS <= gl_InstanceID) return;

    vec3 center = spheres[gl_InstanceID].posRadius.xyz;
    float radius = spheres[gl_InstanceID].posRadius.w;
	
    vec3 origin = gl_WorldRayOriginNV;
    vec3 dir = normalize(gl_WorldRayDirectionNV);
	
	vec3 co = origin - center;
	float a = 1.0; // dot(dir, dir)
	float b = dot(co, dir);
	float c = dot(co, co) - radius * radius;
	float discr = b*b - a*c;
	if (discr <= 0.0) return;

	float t = (-b - sqrt(discr)) / a;
	if (gl_RayTminNV < t && t < gl_RayTmaxNV) {
		vec3 p = origin + t * dir;
		normal = p - center;
		reportIntersectionNV(t, 0u);
		return;
	}
	t = (-b + sqrt(discr)) / a;
	if (gl_RayTminNV < t && t < gl_RayTmaxNV) {
		vec3 p = origin + t * dir;
		normal = p - center;
		reportIntersectionNV(t, 0u);
		return;
	}
}