#version 460
#extension GL_NV_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require

#extension GL_GOOGLE_include_directive : require
#include "common.glsl"

layout(set = 0, binding = 0, rgba8) uniform image2D renderImage;
layout(set = 0, binding = 1) uniform CameraProperties {
	mat4 viewInverse;
	mat4 projInverse;
	vec4 position;
} cam;
layout(set = 0, binding = 2, r32i) uniform iimage2D objectIDsImage;
layout(set = 1, binding = 0) uniform accelerationStructureNV tlas;

layout(location = 0) rayPayloadNV RayPayload ray_payload;

void main()
{
	vec2 uv = (vec2(gl_LaunchIDNV.xy) + vec2(0.5) - vec2(gl_LaunchSizeNV.xy) / 2) / vec2(gl_LaunchSizeNV.x); // between -0.5 and 0.5
	vec4 target = cam.projInverse * vec4(uv.x, -uv.y, 1, 1);
	vec4 direction = cam.viewInverse * vec4(normalize(target.xyz / target.w), 0);

	uint rayFlags = gl_RayFlagsOpaqueNV;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

	ray_payload.objectID = -1;
	ray_payload.color = vec4(-1);
	traceNV(tlas, rayFlags, cullMask, 0, 0, 0, cam.position.xyz, tmin, normalize(direction.xyz), tmax, 0);

	imageStore(renderImage, ivec2(gl_LaunchIDNV.xy), ray_payload.color);
	imageStore(objectIDsImage, ivec2(gl_LaunchIDNV.xy), ivec4(ray_payload.objectID, 0, 0, 0));
}
